; Prefork config file

; This file is optional. If it helps you deploy your service, use it:
;   Prefork::use_ini_file( "/path/to/prefork.ini" );
; Prefork can also be configured by array which may be faster:
;   Prefork::use_ini_array( array( 'max_workers' => 1, ... ) );
; If you use both methods, entries in the file will override.

; Callbacks named here must be callable by the end of your app loader.
;prefork_callback = prefork_callback
;postfork_callback = postfork_callback

; Location of pidfile. Omit this entry to disable pidfile support.
;pidfile = "/var/run/prefork.pid"

; Cause the Prefork service to detach from the caller
;daemonize = true

; Gateway Timeout
; Agents will wait this many seconds before giving up.
;gateway_timeout = 120

; Heartbeats per minute / callback
; Performs worker supervision and the optional heartbeat_callback.
heartbeat_bpm = 300

; This callback is called by the service without loading your app
; so it should be defined in your service loader.
;heartbeat_callback = heartbeat_callback

; How many workers should load the app concurrently
max_workers = 2

; Limit interns to one per worker
; This feature enables running apps with dirty loaders.
; For best performance you should clean your loader and disable this.
single_interns = false

; Minimum free RAM required before spawning additional interns
; Requests will hang until RAM frees up or a timeout occurs.
; Only used when single_interns=false
min_free_ram = "0.20"

; For connections from Agents to Service
; Each Prefork Service on a machine must have a unique request_port.
request_address = "127.0.0.1"
request_port = 8300
request_backlog = 64

; For connections from Workers to Service
; If the offer_port is unavailable, but the service did successfully
; bind the request_port above, the service will increment offer_port
; until it binds an available port. Its workers are then spawned with
; the bound port in their config.
offer_address = "127.0.0.1";
offer_port = 8310;
offer_backlog = 64;

; For connections from Interns to Service
; The note about binding offer_port also applies to response_port.
response_address = "127.0.0.1";
response_port = 8320;
response_backlog = 64;

